				   =========================================
				   ===    DOCUMENTAÇÃO - PROJETO BASE    ===
				   =========================================

	Este arquivo contém a documentação do  projeto base de automação utilizando 
a linguagem C# com  Selenium. Este é um projeto  de código livre,  que pode ser 
alterado  conforme a  necessidade  do uso. Peço apenas a gentileza de  manter o 
crédito do desenvolvedor, Ricardo Luis de Oliveira =)


	1 - ESTRUTURA DO PROJETO
	------------------------
	
	Por padrão, o projeto é constituido  de uma pasta principal denominada CORE,
onde  ficam as  4 (quatro)  classes  principais  do  código:  Begin.cs,  DSL.cs, 
GlobalVariables.cs e  LogSystem.cs.  As demais  estruturas do projeto  podem ser
criadas conforme o  desejo  do desenvolvedor.  Sugiro, porém,  que sejam criadas 
2 (duas) outras pastas para comportarem  as classes  de test e as pages que irão
corresponder a estes testes. Caso seja feito desta forma, a classe eteste deverá
referenciar a classe page  para que as funções sejam executadas na  classe teste
conforme o exemplo abaixo:

	Pasta Page -> classe ValidaCadstroPage.cs
	Pasta Test -> classe ValidaCadastro.cs (ou ValidaCadastroTest.cs)

	Esta estrutura pode ser verificada no teste de exemplo deste projeto.


	2 - CLASSES PRINCIPAIS
	-----------------------

	O projeto base conta com 4 (quatro)  classes principais  conforme citados no
item anterior. Neste item falarei um poucos sobre cada um deles.

	Begin.cs:
	---------
	A classe Begin.cs é a classe de início do projeto. Nela estão as funções que
serão executadas sempre no início e no final de cada teste. Uma observação sobre 
esta classe é que a função  AbreNavegador();  pode ser configurada para executar
os testes em modo  "headless"  (onde os testes são executados sem a  exibição da 
tela do navegador) ou em modo  "desenvolvedor"  (sem fechar o navegador ao final 
da execução dos testes).

	DSL.cs
	------
	Do acrônimo Domain Specific Language,  esta é a classe onde ficam as funções
responsáveis pela integração com os elementos através do Selenium WebDriver. Por
boas práticas, sugere-se que todo o código que utilize  Selenium para integração
com o navegador fique nesta classe. No final desta documentação encontram-se  as
as descrições de cada função bem como sua sintaxe de uso.

	GlobalVariables.cs
	------------------
	Esta classe é responsável pelo armazenamento de variáveis que são utilizadas
em todo o projeto.

	LogSystem.cs
	------------
	Esta é a classe responsável pela geração de evidências dos testes através de
arquivos em formato HTML, armazenados em uma pasta pré-definida, a qual pode ser 
alterada dentro da própria classe. Dentro desta pasta são criadas  subpastas com
a data  da execução  dos testes. As informações dos registros  dos arquvivos são
capturadas através do retorno do conteúdo das funções  que validam  os  'steps'.
Estes registros podem resultar 2 (dois) tipos de evidência: Apenas texto, quando
o teste for positivo ou texto e  'print'  da tela,  quando o teste quebrar. Para
fazer a captura destes retornos, usa-se a função ValidaStep();  onde a função  é
colocada ao final de cada método na page. Exemplo:

	public void ClicaBtnProxima()
	{
		return ClicaElemento("//*[contains(text(),'Próxima')]");
		ValidaStep("Clicou no botão Próxima", "Erro ao clicar no botão Próxima");
	}

	Desta forma,  caso o teste passe,  a função retorna a frase positiva. Caso o
teste não passe, a função retorna a frase negativa.


	3 - HERANÇA DE CLASSES
	----------------------

	As classes principais do projeto (armazenadas na pasta Core) são dependentes
umas das outras. Por este motivo, é necessário fazer com que  uma herde da outra
as informações nelas contidas. Por padrão, montamos essa  estrutura de herança a
partir da Begin.cs, pois é ela a responsável pela execução  primária de todos os
demais testes. Em seguida temos a DSL.cs, seguido pelo LogSystem.cs e por último
o GlobalVariables.cs. É importante ressaltar que, caso haja necessidade de mudar
ou adicionar alguma classe no  Core do projeto, as novas classes  sigam a  mesma
ordem, sempre deixando o GlobalVariables.cs  por último.  A estrutura então fica
da seguinte forma:

	Begin <- DSL <- LogSystem <- GlobalVariables

	E, desta forma, todas as demais classes, tanto pages quanto testes, herdarão
de Begin. Este exemplo pode ser observado no modelo de teste AcessaGmail.cs.

	Já em relação aos testes, estes herdarão da sua classe page que, por sua vez
herdará de Begin.cs. Conforme o exemplo abaixo:

	class AcessaGmail : AcessaGmailPage
	class AcessaGmailPage : Begin

	
	4 - INTERAÇÃO DAS FUNÇÕES COM OS ELEMENTOS DA PÁGINA
	----------------------------------------------------

	Antes de falar da  estrutura das funções do sistema,  vale ressaltar  que há
diferentes meios de interação dos testes com os elementos de uma página Web. Por
exemplo: id, classname, cssSelector, linkText, xPath, etc.  Por padrão, todas as
funções deste  projeto são configuradas para interagir  com os elementos através
do código xPath, uma vez que, com xPath,  é possível a interação não somente por
xPath, como os demais meios, utilizando xPath. Alguns exemplos:

	Usando xPath para interagir com um elemento por id:
	//*[@id='valorDoId']

	Usando xPath para interagir com um elemento por name:
	//*[@name='valorDoName']

	Com xPath a interação é mais dinânica e possibilida uma variedade de criação
de código (complexos ou simplifiacados) para interação com os elementos.


	5 - ESTRUTURA DAS FUNÇÕES
	-------------------------

	As funções primárias do sistema são armazenadas na classe DSL.cs.  Estas são
construídas com a estrutura 'try / catch' para validar os resultados positivos e
negativos de uma  determinada requisição.  Além disso, usa-se a variável  global
'testPassed' para  validar  tanto o sucesso do  teste  quanto o comportamento do
LogSystem determinando qual tipo de arquivo  HTML será gerado  (somente texto ou
texto + iamgem capturada).

	Vamos ao exemplo de uma função. Temos abaixo a função ClicaElemento(); e sua
estrutura completa:

	public void ClicaElemento(string element)
	{
		if (!testPassed) Assert.Fail();
		try
			{
				driver.FindElement(By.XPath(element)).Click();
			}
		catch
			{
				testPassed = false;
			}
		}
	}

	Explicando a função ClicaElemento(); tal sugere o nome, esta função tem como
finalidade clicar em algum elemento  da página  (botão, link, etc).  Esta possui
uma variável que será atribuída a função. Neste caso, temos a variável 'element'
representando o código xPath da instrução.

	Quanto aos componentes  que formam a estrutura da função,  na primeira linha
temos um 'if' que valida a condição da variável 'testPassed'.  Caso seja true, o
teste segue. Caso o teste quebre, a variável recebe o valor false, interrompendo
o teste. Na sequência, temos a construção da estrutura  try/cacth. Dentro do try
temos a instrução em  Selenium que executa um click no elemento determinado pela
variável 'element'. Logo abaixo temos o return da função com a mensagem acertiva
e abaixo, dentro do catch, temos a atribuição do valor  'false'  para a variável
'testPassed', com a finalidade de interromper o fluxo do teste.

	A estrutura vista acima é a função primária, utilizando Selenium  WebDriver,
que deve ser  armazenada no arquivo  DSL.cs. Veremos agora a  construção  de  um
método a ser utilizado na Page do projeto, para ser  chamado através  do arquivo
Test. É neste métodos que informamos  todos os valores  a serem  atribuídos  nas
variáveis das funções primárias contidas na DSL. Vejamos o exemplo abaixo:

	public void ClicaBtnProxima()
	{
		return ClicaElemento("//*[contains(text(),'Próxima')]");
		ValidaStep("Clicou no botão Próxima", "Erro ao clicar no botão Próxima");
	}

	No exemplo acima foi criado o método ClicaBtnProxima(); para clicar no botão
cujo texto é "Próxima". A estrutura é simples. Informa-se o  xPath do elemento a
ser clicado e as mensagens de sucesso e erro da função.

	Para finalizar, o método criado na Page deve ser chamado pelo arquivo teste.
Desta forma:

	page.ClicaBtnProxima();


	6 - TIPOS DE FUNÇÕES PRIMÁRIAS
	------------------------------

	As funções primárias da classe DSL são classificadas em 3 (três) tipos:

	De manipulação:
	---------------
	Funções que auxiliam a interação com elementos, como aguardar um determinado
tempo ou limpar um campo já preenchido. Estas funções estão com  nomenclatura em
inglês para diferenciá-las das demais.

	De atribuição:
	--------------
	Funções que atribuem algum valor a uma variável, como capturar o texto de um
determinado campo e guardá-lo em uma variável.

	De interação:
	-------------
	Funções que interagem com o sistema e validam os steps  pré-estabelecidos no
teste. Estas funções também são responsáveis pelo armazenamento das mensagens de 
erro ou sucesso dos testes.


	7 - GLOSSÁRIO: FUNÇÕES PRIMÁRIAS
	--------------------------------

	----------------------
	Funções de manipulação
	----------------------

	# Wait(int time): Usa-se para fazer pausa entre funções.
	Exemplo: Wait(2000);

	# WaitElement(string element): Aguarda até que o elemento  desejado  apareça
na tela. O tempo de espera pode ser alterado.
	Exemplo: WaitElement("//*[@id='btnSalvar']");

	# WaitElementGone(string element): Aguarda até que um elemento que esteja na
tela desapareça. O tempo de espera pode ser alterado.
	Exemplo: WaitElementGone("//*[@id='modalAlert']");

	# ClearData(string element): Limpa o conteúdo de um campo.
	Exemplo: ClearData(//*[@id='campoNome']);

	# ClickOut(): Clica fora de um determinado campo.

	# EndFile():  Usa-se no final de cada  classe de teste  com a  finalidade de
validar como true a variável testPassed e imprimir no arquivo log a mensagem  de
Fim do Teste OK.
	Sintaxe: Log(EndFile());

	---------------------
	Funções de atribuição
	---------------------

	# CapturaDadosBy(string element, string attribute):  Captura o valor  de  um
campo ou elemento e o atribui a uma variável. Pode ser usado como atributo Value,
 InnerText, etc.
	Exemplo: string numProposta = CapturaDadosBy("xpathExemplo", "InnerText");

	# GeraStringPorTamanho(int times, string value):  Gera string com  um  valor
pré-estabelecido. Útil para validação de tamanho máximo de caracteres num campo.
	Exemplo: string maxSize10 = GeraStringPorTamanho(10, A);

	# GeraStringNumericaAleatoria(int size): Gera string numérica com númmero de
caracteres pré-estabelecido.
	Exemplo: string strNum10 = GeraStringNumericaAleatoria(10);

	# GeraStringAlfanumericoAleatorio(int size):  Gera string  alfanumérica  com
número de caracteres pré-estabelecido.
	Exemplo: string strChar7 = GeraStringAlfanumericoAleatorio(7);

	# CapturaUrlAtual(): Captura o endereço atual exibido na barra do  navegador
e o atribui a uma variável.
	Exemplo: string urlAtual = CapturaUrlAtual();

	# GeraNomeAleatorio(): Gera nome aleatório (nome e sobrenome)  e o atribui a
uma variável.
	Exemplo: string nome = GeraNomeAleatorio();

	# GeraEmailAleatorio(): Gera e-mail aleatório e o atribui a uma variável
	Exemplo: string email = GeraEmailAleatorio();

	# GeraDataNascimento(): Gera uma data de nascimento aleatória  e a atribui a
uma variável.
	Exemplo: string dataNascRnd = GeraDataNascimento();

	# GeraCPF(): Gera CPF aleatório e o atribui a uma variável.
	Exemplo: string cpf = GeraCPF();

	# GeraCNPJ(): Gera CNPJ aleatório e o atribui a uma variável.
	Exemplo: string cnpj = GeraCNPJ);

		# GeraCEP(): Gera CEP aleatório e o atribui a uma variável.
	Exemplo: string cep = GeraCEP();

	--------------------
	Funções de interação
	--------------------

	Observação: Todas as funções de interação devem  ser utilizadas  como return
das funções criadas na classe page.

	# ClicaElemento(string element, int wait = 1000):
	Clica num determinado elemento a partir de seu xPath.

	Exemplo: 
	ClicaElemento("//*[@id='btnSalvar']", 3000);
	ValidaStep("Clicou no botão Salvar", "Erro ao clicar no botão Salvar");

	Observação: Por padrão, esta função tem timer de 1 segundo após o clique. Tal
valor pode ser alterado conforme mostrado aqui, digitando o valor esperado.

	# EscreveTexto(string element, string value):
	Preenche um determinado campo com o valor informado.

	Exemplo:
	EscreveTexto("//*[@id='campoNome']","Ricardo Oliveira");
	ValidaStep("Preencheu o nome Ricardo Oliveira",
				"Erro ao preencher o nome Ricardo Oliveira");
	
	# ValidaDados(string element, string value):
	Verifica se o valor informado está presente no local do xPath indicado.

	Exemplo:
	ValidaDados("//*[@id='colunaCEP']", "01409-020"); 
	ValidaStep("Validou o CEP 01409-020","Erro ao validar o CEP 01409-020");

	# MenuDropDown(string element, string value):
	Substitui o SelectDropDown  do Selenium  (que só funciona em menus simples).

	Exemplo:
	MenuDropDown("//*[@id='menuEstado']","São Paulo");
	ValidaStep("Selecionou o Estado São Paulo",
				"Erro ao selecionar o Estado São Paulo");

	# UploadArquivo(string input, string path):
	Seleciona um determinado arquivo para fazer upload através do caminho local
	do arquivo apontando para o input da página.

	Exemplo: UploadArquivo("//*[@id='uploadfile']", 
				@"C:\Projetos\Documentação.txt");
	ValidaStep("Selecionou o arquivo Documentação.txt",
				"Erro ao selecionar o arquivo Documentação.txt");

	# DownloadArquivo(string fileName):
	Verifica o download de um arquivo através do seu nome.  A validação é feita
	na pasta Downloads do Windows (por padrão). Este caminho  pode ser alterado
	na função.

	Exemplo: DownloadArquivo("planilhaXYZ.xlsx");
	ValidaStep(	"Validou o download do arquivo planilhaXYZ.xlsx",
				"Erro ao validar o download do arquivo planilhaXYZ.xlsx");