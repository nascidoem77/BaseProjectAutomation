				   =========================================
				   ===    DOCUMENTAÇÃO - PROJETO BASE    ===
				   =========================================

	Este arquivo contém a documentação do  projeto base de automação utilizando 
a linguagem C# com  Selenium. Este é um projeto  de código livre,  que pode ser 
alterado  conforme a  necessidade  do uso. Peço apenas a gentileza de  manter o 
crédito do desenvolvedor, Ricardo Luis de Oliveira =)


	1 - ESTRUTURA DO PROJETO
	------------------------
	
	Por padrão, o projeto é constituido  de uma pasta principal denominada CORE,
onde  ficam as  4 (quatro)  classes  principais  do  código:  Begin.cs,  DSL.cs, 
GlobalVariables.cs e  LogSystem.cs.  As demais  estruturas do projeto  podem ser
criadas conforme o  desejo  do desenvolvedor.  Sugiro, porém,  que sejam criadas 
2 (duas) outras pastas para comportarem  as classes  de test e as pages que irão
corresponder a estes testes. Caso seja feito desta forma, a classe eteste deverá
referenciar a classe page  para que as funções sejam executadas na  classe teste
conforme o exemplo abaixo:

	Pasta Page -> classe ValidaCadstroPage.cs
	Pasta Test -> classe ValidaCadastro.cs (ou ValidaCadastroTest.cs)

	Referenciando a classe page dentro da classe test:
	var page = new ValidaCadastroPage();

	E a chamada da função na classe test:
	page.ClicaMenuPrincipal();

	Esta estrutura pode ser verificada no teste de exemplo deste projeto.


	2 - CLASSES PRINCIPAIS
	-----------------------

	O projeto base conta com 4 (quatro)  classes principais  conforme citados no
item anterior. Neste item falarei um poucos sobre cada um deles.

	Begin.cs:
	---------
	A classe Begin.cs é a classe de início do projeto. Nela estão as funções que
serão executadas sempre no início e no final de cada teste. Uma observação sobre 
esta classe é que a função  AbreNavegador();  pode ser configurada para executar
os testes em modo  "headless"  (onde os testes são executados sem a  exibição da 
tela do navegador) ou em modo  "desenvolvedor"  (sem fechar o navegador ao final 
da execução dos testes).

	DSL.cs
	------
	Do acrônimo Domain Specific Language,  esta é a classe onde ficam as funções
responsáveis pela integração com os elementos através do Selenium WebDriver. Por
boas práticas, sugere-se que todo o código que utilize  Selenium para integração
com o navegador fique nesta classe. No final desta documentação encontram-se  as
as descrições de cada função bem como sua sintaxe de uso.

	GlobalVariables.cs
	------------------
	Esta classe é responsável pelo armazenamento de variáveis que são utilizadas
em todo o projeto.

	LogSystem.cs
	------------
	Esta é a classe responsável pela geração de evidências dos testes através de
arquivos em formato HTML, armazenados em uma pasta pré-definida, a qual pode ser 
alterada dentro da própria classe. Dentro desta pasta são criadas  subpastas com
a data  da execução  dos testes. As informações dos registros  dos arquvivos são
capturadas através do retorno do conteúdo das funções  que validam  os  'steps'.
Estes registros podem resultar 2 (dois) tipos de evidência: Apenas texto, quando
o teste for positivo ou texto e  'print'  da tela,  quando o teste quebrar. Para
fazer a captura destes retornos, usa-se a função Log();  onde a função principal
é colocada dentro dos parêneteses. Exemplo:

	Log(ClicaMenuPrincipal());


	3 - HERANÇA DE CLASSES
	----------------------

	As classes principais do projeto (armazenadas na pasta Core) são dependentes
umas das outras. Por este motivo, é necessário fazer com que  uma herde da outra
as informações nelas contidas. Por padrão, montamos essa  estrutura de herança a
partir da Begin.cs, pois é ela a responsável pela execução  primária de todos os
demais testes. Em seguida temos a DSL.cs, seguido pelo LogSystem.cs e por último
o GlobalVariables.cs. É importante ressaltar que, caso haja necessidade de mudar
ou adicionar alguma classe no  Core do projeto, as novas classes  sigam a  mesma
ordem, sempre deixando o GlobalVariables.cs  por último.  A estrutura então fica
da seguinte forma:

	Begin <- DSL <- LogSystem <- GlobalVariables

	E, desta forma, todas as demais classes, tanto pages quanto testes, herdarão
de Begin. Este exemplo pode ser observado no modelo de teste AcessaGmail.cs.

	
	4 - INTERAÇÃO DAS FUNÇÕES COM OS ELEMENTOS DA PÁGINA
	----------------------------------------------------

	Antes de falar da  estrutura das funções do sistema,  vale ressaltar  que há
diferentes meios de interação dos testes com os elementos de uma página Web. Por
exemplo: id, classname, cssSelector, linkText, xPath, etc.  Por padrão, todas as
funções deste  projeto são configuradas para interagir  com os elementos através
do código xPath, uma vez que, com xPath,  é possível a interação não somente por
xPath, como os demais meios, utilizando xPath. Alguns exemplos:

	Usando xPath para interagir com um elemento por id:
	//*[@id='valorDoId']

	Usando xPath para interagir com um elemento por name:
	//*[@name='valorDoName']

	Com xPath a interação é mais dinânica e possibilida uma variedade de criação
de código (complexos ou simplifiacados) para interação com os elementos.


	5 - ESTRUTURA DAS FUNÇÕES
	-------------------------

	Conforme citado  anteriormente  no item "LogSystem.cs",  as informações  que
são gravadas nos arquivos  HTML são capturadas através das funções  que estão na
DSL.cs. Estas funções são construídas com a estrutura 'try / catch' e a usa para
validar os resultados positivos e negativos de uma  determinada requisição. Além
disso, usa-se a variável global  'testPassed'  para validar  tanto o  sucesso do
teste quanto o comportamento do LogSystem determinando qual tipo de arquivo HTML
será gerado (somente texto ou texto + iamgem capturada).

	Vamos ao exemplo de uma função. Temos abaixo a função ClicaElemento(); e sua
estrutura completa:

	public string ClicaElemento(string element, string msgOk, string msgError)
	{
		if (!testPassed) Assert.Fail();
		try
			{
				driver.FindElement(By.XPath(element)).Click();
				return msgOk + "<br>";
			}
		catch
			{
				testPassed = false;
				return "<font color = red>" + msgError + testNok;
			}
		}
	}

	Explicando a função ClicaElemento(); tal sugere o nome, esta função tem como
finalidade clicar em algum elemento da página (botão, link, etc).  Esta possui 3
(três) variáveis que serão atribuídas  no código a seguir.  São elas  'element',
representando o código xPath  da instrução e, respectivamente, msgOk e msgError, 
as mensagens de validação e erro da função.

	Explicadas as variáveis,  vamos falar dos componentes que formam a estrutura
da função. Na primeira  linha temos um  'if'  que valida a condição  da variável
'testPassed'. Caso seja true, o teste continua. Caso o teste  quebre, a variável
recebe o valor false e  interrompe o teste.  Na sequência, temos a construção da
estrutura try / cacth. Dentro do try, temos a instrução em  Selenium que executa
um click no elemento determinado pela  variável  'element'. Logo abaixo  temos o 
return da função com a  mensagem acertiva.  Em seguida, dentro do catch, temos a
atribuição do  valor 'false' para a variável 'testPassed',  com a  finalidade de
interromper o fluxo do teste. Finalmente, temos o return com a mensagem de erro.
Só relembrando, o arquivo log é salvo em formato HTML. Por esse motivo é preciso
incluir algumas tags HTML nos returns para que a estrutura do log seja criada de
forma correta.

	A estrutura vista a cima é a função primária, utilizando Selenium WebDriver,
que deve ser  armazenada no arquivo  DSL.cs. Veremos agora a  construção  de uma
função a ser utilizada no Page do projeto, para ser  chamada através  do arquivo
Test. É nesta função  que informamos  todos os valores  a serem  atribuídos  nas
variáveis das funções primárias contidas na DSL. Vejamos o exemplo abaixo:

	public string ClicaBtnProxima()
	{
		return ClicaElemento(
		"//*[contains(text(),'Próxima')]",
		"Clicou no botão Próxima",
		"Erro ao clicar no botão Próxima");
	}

	Assim como a função primária  ClicaElemento();,  as funções criadas  no Page
devem ser do tipo 'string' pois precisam retornar as mensagens  de erro e acerto
de cada passo. No exemplo  a cima, foi criada a função  ClicaBtnProxima();  para
clicar no botão cujo texto é "Próxima". E a estrutura é  bem simples. Cria-se um
return com a função primária desejada, passando os parâmetros conforme demanda a
a função. No caso da  ClicaElemento();,  informa-se o  xPath  do elemento a  ser
clicado e as mensagens de sucesso e erro da função.

	Para finalizar, a função criada no Page deve ser chamada pelo arquivo teste,
sendo encapsulada pela função Log();. Esta função tem o papel de armazenar todos
os registros capturados pela função (mensagens de sucesso e erro). Desta forma:

	Log(ClicaBtnProxima());


	6 - TIPOS DE FUNÇÕES PRIMÁRIAS
	------------------------------

	As funções primárias da classe DSL são classificadas em 3 (três) tipos:

	De manipulação:
	---------------
	Funções que auxiliam a interação com elementos, como aguardar um determinado
tempo ou limpar um campo já preenchido. Estas funções estão com  nomenclatura em
inglês para diferenciá-las das demais.

	De atribuição:
	--------------
	Funções que atribuem algum valor a uma variável, como capturar o texto de um
determinado campo e guardá-lo em uma variável.


	De interação:
	-------------
	Funções que interagem com o sistema e validam os steps  pré-estabelecidos no
teste. Estas funções também são responsáveis pelo armazenamento das mensagens de 
erro ou sucesso dos testes.


	7 - GLOSSÁRIO: FUNÇÕES PRIMÁRIAS
	--------------------------------

	----------------------
	Funções de manipulação
	----------------------

	# Wait(int time): Usa-se para fazer pausa entre funções.
	Ex.: Wait(2000);

	# WaitElement(string element): Aguarda até que o elemento  desejado  apareça
na tela. O tempo de espera pode ser alterado.
	Ex.: WaitElement("//*[@id='btnSalvar']");

	# WaitElementGone(string element): Aguarda até que um elemento que esteja na
tela desapareça. O tempo de espera pode ser alterado.
	Ex.: WaitElementGone("//*[@id='modalAlert']");

	# ClearData(string element): Limpa o conteúdo de um campo.
	Ex.: ClearData(//*[@id='campoNome']);

	# ClickOut(): Clica fora de um determinado campo.

	# EndFile():  Usa-se no final de cada  classe de teste  com a  finalidade de
validar como true a variável testPassed e imprimir no arquivo log a mensagem  de
Fim do Teste OK.
	Sintaxe: Log(EndFile());

	---------------------
	Funções de atribuição
	---------------------

	# CapturaDadosBy(string element, string attribute):  Captura o valor  de  um
campo ou elemento e o atribui a uma variável. Pode ser usado como atributo Value,
 InnerText, etc.
	Ex.: string numProposta = CapturaDadosBy("xpathExemplo", "InnerText");

	# GeraStringPorTamanho(int times, string value):  Gera string com  um  valor
pré-estabelecido. Útil para validação de tamanho máximo de caracteres num campo.
	Ex.: string maxSize10 = GeraStringPorTamanho(10, A);

	# GeraStringNumericaAleatoria(int size): Gera string numérica com númmero de
caracteres pré-estabelecido.
	Ex.: string strNum10 = GeraStringNumericaAleatoria(10);

	# GeraStringAlfanumericoAleatorio(int size):  Gera string  alfanumérica  com
número de caracteres pré-estabelecido.
	Ex.: string strChar7 = GeraStringAlfanumericoAleatorio(7);

	# CapturaUrlAtual(): Captura o endereço atual exibido na barra do  navegador
e o atribui a uma variável.
	Ex.: string urlAtual = CapturaUrlAtual();

	# GeraNomeAleatorio(): Gera nome aleatório (nome e sobrenome)  e o atribui a
uma variável.
	Ex.: string nome = GeraNomeAleatorio();

	# GeraEmailAleatorio(): Gera e-mail aleatório e o atribui a uma variável
	Ex.: string email = GeraEmailAleatorio();

	# GeraDataNascimento(): Gera uma data de nascimento aleatória  e a atribui a
uma variável.
	Ex.: string dataNascRnd = GeraDataNascimento();

	# GeraCPF(): Gera CPF aleatório e o atribui a uma variável.
	Ex.: string cpf = GeraCPF();

	# GeraCNPJ(): Gera CNPJ aleatório e o atribui a uma variável.
	Ex.: string cnpj = GeraCNPJ);

		# GeraCEP(): Gera CEP aleatório e o atribui a uma variável.
	Ex.: string cep = GeraCEP();

	--------------------
	Funções de interação
	--------------------

	Observação: Todas as funções de interação devem  ser utilizadas  como return
das funções criadas na classe page.

	# ClicaElemento(string element, string msgOk, string msgError, int wait = 1000)
elemento a partir de seu xPath.
	Ex.: ClicaElemento(
		"//*[@id='btnSalvar']",
		"Clicou no botão Salvar",
		"Erro ao clicar no botão Salvar",
		3000);
	Observação: Por padrão, esta função tem timer de 1 segundo após o clique. Este
valor pode ser alterado conforme mostrado aqui, digitando o valor esperado.

	# EscreveTexto(string element, string value, string msgOk, string msgError):
Preenche um determinado campo com o valor informado.
	Ex.: EscreveTexto(
		"//*[@id='campoNome']",
		"Ricardo Oliveira", 
		"Preencheu o nome Ricardo Oliveira",
		"Erro ao preencher o nome Ricardo Oliveira"	);

	# ValidaDados(string element, string value, string msgOk, string msgError):
Verifica se o valor informado está presente no local do xPath indicado.
	Ex.: ValidaDados(
		"//*[@id='colunaCEP']",
		"01409-020", 
		"Validou o CEP 01409-020",
		"Erro ao validar o CEP 01409-020");

	# MenuDropDown(string element, string value, string msgOk, string msgError):
Substitui o SelectDropDown do Selenium (que só funciona em menus simples). clica
no menu desejado através de xPath e seleciona o valor desejado dentro do menu.
	Ex.: MenuDropDown(
		"//*[@id='menuEstado']",
		"São Paulo", 
		"Selecionou o Estado São Paulo",
		"Erro ao selecionar o Estado São Paulo");

	# UploadArquivo(string input, string path, string msgOk, string msgError):
Seleciona um determinado arquivo para fazer upload através do  caminho local do
arquivo apontando para o input da página.
	Ex.: UploadArquivo(
		"//*[@id='uploadfile']",
		@"C:\Projetos\Documentação.txt", 
		"Selecionou o arquivo Documentação.txt",
		"Erro ao selecionar o arquivo Documentação.txt");

	# DownloadArquivo(string fileName, string msgOk, string msgError):  Verifica
o download de um arquivo através do seu nome. Por padrão, a validação é feita na
pasta Downloads do Windows. Este caminho pode ser alterado na função.
	Ex.: DownloadArquivo(
		"planilhaXYZ.xlsx",
		"Validou o download do arquivo planilhaXYZ.xlsx",
		"Erro ao validar o download do arquivo planilhaXYZ.xlsx");